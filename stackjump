#!/bin/bash


# password hash to set for 'ubuntu' user account on install
# default set to 'none' spelled out
source stackjump.config
MYPASSWD=${UBUNTU_PWHASH:-'$6$Cjxz1rgM$ahShoUXrRY0qabPBMuFSmxRcwqkA2BRmb0B9Dlkzd5BfiunORoayXm3RZCEAsauW50JES9v1GTkkurnXmv8Ey0'}
MYKNIFEPASSWD=${KNIFE_PWSTR:-mypassword}
MYNODENAME=${NODE_NAME:-myjumpnode}
MYDOMAIN=${DOMAIN_NAME:-mydomain.com}
MYCHEFCLIENTVER=${CHEF_CLIENT_VER:-11.8.0-1}
MYCHEFSERVERVER=${CHEF_SERVER_VER:-11.0.8-1}
MYDEFAULTNIC=${DEFAULT_NIC:-eth0}
BOND0IP=${BOND0_IP:-192.168.199.199}
BOND0MASK=${BOND0_NETMASK:-255.255.255.0}
BOND0GW=${BOND0_GATEWAY:-192.168.1.1}
BOND0BUSORDER=${BOND0_BUSORDER:-'"0000:00:05.0","0000:00:06.0","0000:00:07.0","0000:00:08.0"'}

WHOAMI=`whoami`
if [ $WHOAMI != "root" ]; then
  echo "Must be run as sudo root"
  exit 1
fi

USAGE="$0 options
  -d dry run don't create iso
  -c chef repo dir
  -r release_codename (oneiric, natty, maverick, etc)
  -v release_version
  -rl chef run list for jump node (comma delimited)
  -o output iso
  -V verbose
  -t tmpdir
  -k keep tmp dir"

while [ $1 ];do
  case $1 in
    -d) shift
        DRYRUN=1;;
    -c) shift
        CHEFREPO=$1;;
    -r) shift
        REL=$1;;
    -v) shift
        VER=$1;;
    -o) shift
        ISO=$1;;
    -rl) shift
         CHEFRUNLIST=$1;;
    -k) shift
        KEEP=1;;
    -t) shift
        TMPDIR=$1;;
    -V) shift
        VERBOSE=1;;
    *) echo "$USAGE" && exit 1;;
  esac
  shift
done

echo -e "\n!! This tool should only be run on an Ubuntu workstation     !!"
echo "!! This code is customized for AT&T environment usage only   !!"
echo -e "!! Tested only on Precise Pangolin (12.04.3) x86_64          !!\n"

if [ ! $REL ]; then
  REL='precise'
fi

MYTMPDIR=${TMPDIR:-/tmp/stackjump}
ISODIR="$MYTMPDIR/ISO"
ISODIR_EXTRAS="$ISODIR/extras"
INITRD="$MYTMPDIR/initrd"
DOWNLOADS="$MYTMPDIR/DOWNLOADS"
MOUNTDIR="$MYTMPDIR/mount"
EXTRAS="$INITRD/extras"
CUSTOM_SCRIPTSD="$ISODIR_EXTRAS/custom_scripts"
MYCHEFREPO="$ISODIR_EXTRAS/chef-repo"
MYCOOKBOOKSD="$MYCHEFREPO/cookbooks"
MYROLESD="$MYCHEFREPO/roles"

for DIR in $MYTMPDIR $DOWNLOADS $ISODIR $INITRD $MOUNTDIR $CUSTOM_SCRIPTSD $MYCOOKBOOKSD $MYROLESD; do
  if [ ! -d $DIR ]; then
    mkdir -p $DIR
  fi
done

## SANITY CHECKS ##

if [ ! $CHEFREPO ]; then 
  echo -e "\nEnsure that you've specified a chef-repo directory using '-c';  At minimum it needs to contain 'networking' and 'reboot-handler' cookbooks\n"
  exit 1
fi
if [ ! -d $CHEFREPO ]; then
  echo -e "\n$CHEFREPO is not a valid directory"
  exit 1
fi
COOKBOOKSD="$CHEFREPO/cookbooks"
for i in networking reboot-handler; do
  if [ ! -f "$COOKBOOKSD/$i/README.md" ]; then
    echo -e "\nMISSING OR INVALID COOKBOOK: '$COOKBOOKSD/$i' "
    exit 1
  fi
done

for BIN in fakeroot cpio mkisofs curl; do 
  if [ ! `which $BIN` ]; then
    echo "$BIN needs to be installed to run stackjump"
    apt-get -qq -y install genisoimage fakeroot cpio curl
  fi
done

if [ ! $ISO ]; then
  ISO='custom.iso'
fi

ARCH="amd64"

if [ ! $VER]; then
  VER='12.04.3'
fi
DISTURL="http://releases.ubuntu.com"
ISONAME="ubuntu-$VER-server-$ARCH.iso"
ISOURL="$DISTURL/$REL/$ISONAME"

HEAD=`curl -s --head $ISOURL|head -1`
HCODE=`expr "$HEAD" : 'HTTP\/... \(...\) '`
if [ "$HCODE" != '200' ]; then
  echo "Release $REL invalid."
  echo "Check $ISOURL to make sure a valid release codename" && exit 1
fi

### MAKING THE ISO ##
if [ -f "$DOWNLOADS/$ISONAME" ]; then
  echo -e "\n$DOWNLOADS/$ISONAME exists - skipping download\n"
else
  echo -e "\nDownloading $ISOURL to $DOWNLOADS/$ISONAME\n"
  curl $ISOURL -o $DOWNLOADS/$ISONAME
fi

if [ -d $MOUNTDIR/isolinux ]; then
  echo -e "\nISO already mounted $MOUNTDIR - skipping mount\n"
else
  echo -e "\nMounting to $MOUNTDIR...\n"
  mount -r -o loop $DOWNLOADS/$ISONAME $MOUNTDIR
fi
echo -e "\nCopying contents of $ISONAME to $ISODIR\n"
if [ $VERBOSE ]; then
  rsync -av $MOUNTDIR/ $ISODIR/
else
  rsync -av $MOUNTDIR/ $ISODIR/ > /dev/null 2>&1
fi


if [ $VERBOSE ]; then
  (cd $INITRD && gunzip -c $MOUNTDIR/install/initrd.gz| fakeroot cpio -id )
else
  (cd $INITRD && gunzip -c $MOUNTDIR/install/initrd.gz| fakeroot cpio -id ) > /dev/null 2>&1
fi

echo -e "\nCUSTOMIZING ISOLINUX.cfg\n"
cat>"$ISODIR/isolinux/isolinux.cfg"<<EOF
  prompt 0
  timeout 2
  menu hshift 13
  menu width 49
  menu margin 8
  default autoinstall
  
  label autoinstall
  MENU LABEL AUTOMATED INSTALL
  kernel /install/vmlinuz
  append auto ramdisk_size=14984 initrd=/install/initrd.gz vga=normal DEBCONF_DEBUG=5
EOF

echo -e "\nINJECTING PRESEED AND CUSTOM SCRIPTS\n"

cat preseed.cfg | sed "s/MYPASSWD/$MYPASSWD/" | sed "s/MYNODENAME/$MYNODENAME/" |\
  sed "s/MYDOMAIN/$MYDOMAIN/" | sed "s/MYDEFAULTNIC/$MYDEFAULTNIC/" |\
  sed "s/BOND0IP/$BOND0IP/" | sed "s/BOND0MASK/$BOND0MASK/" |\
  sed "s/BOND0GW/$BOND0GW/" > $INITRD/preseed.cfg

for HDIR in "root" "home/ubuntu"; do
  if [ ! -d "$EXTRAS/$HDIR/.ssh" ]; then
    mkdir -p "$EXTRAS/$HDIR/.ssh"
  fi
  cp authorized_keys $EXTRAS/$HDIR/.ssh/authorized_keys
done
cp first_run.sh late_command.sh $EXTRAS/root
if [ $VERBOSE ]; then
  rsync -av custom_scripts/ $CUSTOM_SCRIPTSD/
else
  rsync -av custom_scripts/ $CUSTOM_SCRIPTSD/ > /dev/null 2>&1
fi
cat knife_first_run | sed "s/MYPASSWORD/$MYKNIFEPASSWD/g" |\
   sed "s/MYJUMPNODE/${MYNODENAME}_admin/g" > $EXTRAS/root/knife_first_run

cp stackjump.config $ISODIR_EXTRAS/stackjump.config

# DOWNLOAD LATEST CHEF OMNIBUS PACKAGES

OMNIBUS_URL="https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu"
IFS=. read -r maj min _ <<< "$VER"
OMNI_VER="$maj.$min"
OMNI_ARCH='x86_64'
CHEFCLIENT="chef_$MYCHEFCLIENTVER.ubuntu.${OMNI_VER}_${ARCH}.deb"
CHEFC_URL="$OMNIBUS_URL/$OMNI_VER/$OMNI_ARCH/$CHEFCLIENT"
if [ -f $DOWNLOADS/$CHEFCLIENT ]; then
  echo -e "\n$DOWNLOADS/$CHEFCLIENT exists - skipping chef client download\n"
else
  echo -e "\nDownloading CHEF-CLIENT OMNIBUS $DOWNLOADS/$CHEFCLIENT\n"
  curl $CHEFC_URL -o $DOWNLOADS/$CHEFCLIENT
fi
cp $DOWNLOADS/$CHEFCLIENT $ISODIR_EXTRAS/$CHEFCLIENT

CHEFSERVER="chef-server_$MYCHEFSERVERVER.ubuntu.${OMNI_VER}_${ARCH}.deb"
CHEFS_URL="$OMNIBUS_URL/$OMNI_VER/$OMNI_ARCH/$CHEFSERVER"
if [ -f $DOWNLOADS/$CHEFSERVER ]; then
  echo -e "\n$DOWNLOADS/$CHEFSERVER exists - skipping chef server download\n"
else
  echo -e "\nDownloading CHEF-SERVER OMNIBUS $DOWNLOADS/$CHEFSERVER\n"
  curl $CHEFS_URL -o $DOWNLOADS/$CHEFSERVER
fi
cp $DOWNLOADS/$CHEFSERVER $ISODIR_EXTRAS/$CHEFSERVER

## AT&T SPECIFIC - DOWNLOAD VLAN & IFENSLAVE PKGS FOR COOKBOOK-NETWORKING
  # NEEDS TO BE IMPROVED - WHAT IF NOT RUNNING FROM UBUNTU WORKSTATION AND OR DIFF RELEASE?

for PKG in ifenslave-2.6 vlan; do
  PKGURL=`apt-cache show $PKG|egrep "^Filename:"|awk '{print $2}'`
  PKGN=`echo $PKGURL|sed 's,^.*\/,,g'`
  grep $ARCH $PKGN > /dev/null 2>&1
  # ensure the right pkg depending on $ARCH
  if [ $? != 0 ]; then
    PKGN=`echo $PKGN|sed "s/i386/amd64/"`
  fi
  if [ ! -f "$DOWNLOADS/$PKGN" ]; then
    echo -e "\nDownloading $DOWNLOADS/$PKGN\n"
    curl "http://archive.ubuntu.com/ubuntu/$PKGURL" -o $DOWNLOADS/$PKGN
  else
    echo -e "\n$DOWNLOADS/$PKGN exists - skipping package download\n"
  fi
  cp $DOWNLOADS/$PKGN $ISODIR_EXTRAS/$PKGN
done

## IMPORT THE CHEF REPO
if [ ! -z $CHEFREPO ] && [ -d $CHEFREPO ]; then
  echo -e "\nCOPYING EXTRAS $CHEFREPO...\n"
  if [ $VERBOSE ]; then
    rsync -av $CHEFREPO/ $MYCHEFREPO/
  else
    rsync -av $CHEFREPO/ $MYCHEFREPO/ > /dev/null 2>&1
  fi
fi

BASE_COOKBOOKS="chef-client logrotate cron chef_handler"
for i in $BASE_COOKBOOKS; do
  COOKBOOKD="$MYCOOKBOOKSD/$i"
  if [ ! -f "$COOKBOOKD/README.md" ]; then
    if [ ! -d "$COOKBOOKD" ]; then
      mkdir -p $COOKBOOKD
    fi
    if [ -f "$DOWNLOADS/$i/README.md" ]; then
      echo -e "\n$DOWNLOADS/$i cookbook already exists - skipping download\n"
    else
      echo -e "\nDownloading $i cookbook from github\n"
      OUTPUT=`(cd $MYTMPDIR; curl -kLs https://github.com/opscode-cookbooks/$i/tarball/master | tar -zxv)`
      DLTMP="$MYTMPDIR/`echo $OUTPUT|awk '{print $1}'`"
      mv $DLTMP $DOWNLOADS/$i
    fi
    if [ $VERBOSE ]; then
      rsync -av $DOWNLOADS/$i/ $COOKBOOKD/
    else
      rsync -av $DOWNLOADS/$i/ $COOKBOOKD/ > /dev/null 2>&1
    fi
  else
    echo -e "\n$COOKBOOKD cookbook already exists - skipping download\n"
  fi
done

# BUILD INITRD.GZ
echo -e "\nBUILDING INITRD.GZ...\n"
if [ $VERBOSE ]; then
  (cd $INITRD ; find . | cpio -H newc --create | gzip -9 > $ISODIR/install/initrd.gz)
else
  (cd $INITRD ; find . | cpio -H newc --create | gzip -9 > $ISODIR/install/initrd.gz) > /dev/null 2>&1
fi

# CREATE ISO
if [ $DRYRUN ]; then
  echo -e "\nDRYRUN - skipping ISO creation\n"
else
  echo -e "\nBUILDING THE ISO IMAGE...\n"
  if [ $VERBOSE ]; then
    mkisofs -r -V "Custom Auto Ubuntu Install" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $ISO $ISODIR
  else
    mkisofs -quiet -r -V "Custom Auto Ubuntu Install" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $ISO $ISODIR
  fi
fi

# CLEANUP
if [ ! $KEEP ]; then
  umount $MOUNTDIR
  rm -rf $INITRD $ISODIR $MOUNTDIR
fi

if [ ! -f $ISO ]; then
  echo "Create ISO failed." && exit 1
else
  if [ $DRYRUN ]; then
    echo -e "\nsuccessfully completed\n" && exit 0
  else
    echo -e "\n$ISO successfully created\n" && exit 0
  fi
fi
